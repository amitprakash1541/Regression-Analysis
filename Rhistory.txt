?lm
?predict.lm
install.packages("tidyverse") #contains many contemporary
library(tidyverse)
iris
data1 <- iris
str(data1)
data2 <- as.tibble(data1)
data2
str(data2)
data3 <- tibble(x = 1:5, y = 1,
z = x^2 + y
)
str(data3)
data3
tb <- tibble(
`:)` = "smile",
` ` = "space",
`2000` = "number"
)
tb
tb$
tb$`:)`
tb$`2000`
tb$`:)`
tb$`:)`
tribble(
~x, ~y, ~z,
#--|--|----
"a", 2, 3.6,
"b", 1, 8.5
)
nycflights13::flights
install.packages("nycflights13")
nycflights13::flights
print(nycflights13::flights, n = 5, width = Inf)
options(tibble.width = Inf)
nycflights13::flights
df <- tibble(
x = runif(5),
y = rnorm(5),
z = c("a", "b", "c", "d", "e")
)
df
set.seed(123)
df <- tibble(
x = runif(5),
y = rnorm(5),
z = c("a", "b", "c", "d", "e")
)
df
df$y
df[["x"]]
df[[c("x", "z")]]
df[["x", "z"]]
df[[1:3]]
df[["x"]]
df[["z"]]
df[[1]]
df[, 1]
df[, c(1,3)]
df.dataframe <- data.frame(
dog = runif(5),
y = rnorm(5),
z = c("a", "b", "c", "d", "e")
)
df.dataframe
df.dataframe$do
df.dataframe$d
data1
head(data1)
plot(x = data1$Sepal.Length, y = data1$Sepal.Width)
dev.new()
plot(x = data1$Sepal.Length, y = data1$Sepal.Width)
string <- "this is a string
"
string
string <- "this is a string
""
"
string <- "this is a string
"
string
string <- "this is a string
string.w.quotations <- "Bob said \"Hello, my name is Bob\" "
string.w.quotations
library(stringr)
string.w.quotations <- "Bob said \"Hello, my name is Bob\" "
string.w.quotations
string.w.quotations <- "Bob said \"Hello, my name is Bob "
string.w.quotations <- "Bob said \"Hello, my name is Bob "
string.w.quotations
string.w.quotations <- "Bob said /"Hello, my name is Bob "
string.w.quotations <- "Bob said \''Hello, my name is Bob "
string.w.quotations
string.w.quotations <- "Bob said \'Hello, my name is Bob "
string.w.quotations
double_quote <- "\""
double_quote
single_quote <- "\'"
single_quote
double_quote2 <- '""'
double_quote2
writeLines(double_quote)
?"'"
x <- "\u00b5"
x
str_length(c("a", "R for data science", NA))
length(c("a", "R for data science", NA))
str_c("x", "y")
str_c("x", "y", "z")
str_c("x", "y", sep = ", ")
str_c("x", "y", sep = ":")
str_c("x", "y", sep = "\~")
str_c("x", "y", sep = "~")
str_c("x", "y", sep = " ")
str_c("x", "y", sep = "\t")
writeLines(str_c("x", "y", sep = "\t"))
x <- c("abc", NA)
str_c("|-", x, "-|")
str_c("|-", str_replace_na(x), "-|")
trial1 <- str_c("|-", x[1], x[2], "-|")
trial1
x[2]
str_c(str_replace_na(x), sep = ", ")
str_replace_na(x)
length(str_replace_na(x))
str_c(str_replace_na(x))
str_c(str_replace_na(x), sep = ":")
x <- c("abc", "de")
x
trial1 <- str_c("|-", x[1], x[2], "-|")
trial1
trial2 <- str_c("|-", str_c(x, sep = ", "), "-|")
trial2
str_c(x, sep = ", ")
trial2 <- str_c("|-", str_c(x[1], x[2], sep = ", "), "-|")
trial2
name <- "Hadley"
time_of_day <- "morning"
birthday <- FALSE
str_c(
"Good ", time_of_day, " ", name,     #prints Good morning Hadley
if (birthday) " and HAPPY BIRTHDAY", #if birthday == TRUE, then this prints
"."                                  #and HAPPY BIRTHDAY
)
birthday = TRUE
str_c(
"Good ", time_of_day, " ", name,     #prints Good morning Hadley
if (birthday) " and HAPPY BIRTHDAY", #if birthday == TRUE, then this prints
"."                                  #and HAPPY BIRTHDAY
)
str_c(c("x", "y", "z"), collapse = ", ")
x <- c("abc", NA)
str_replace_na(x)
str_c(str_replace_na(x), collapse = ", ")
trial2 <- str_c("|-", str_c(str_replace_na(x), collapse = ", "), "-|")
trial2
str_sub(x, 1, 1)
x <- c("Apple", "Banana", "Pear")
str_sub(x, 1, 1)
str_to_lower(str_sub(x, 1, 1))
str_sub(x, 1, 1)
str_sub(x, 1, 1) <- str_to_lower(str_sub(x, 1, 1))
x
str_sub(x, 1, 1) <- str_to_upper(str_sub(x, 1, 1))
x
x <- c("apple", "banana", "pear")
str_view(x, "an")
str_view(x, "ea")
str_view(x, "re")
str_view(x, "Ap")
str_view(x, ".a.")
c("abc", "a.c", "bef")
str_view(c("abc", "a.c", "bef"), "a\\.c")
str_view(c("abc", "a.c", "bef"), "a\.c")
install.packages("htmlwidgets")
x <- "a\\b"
writeLines(x)
str_view(x, "\\\\")
x <- c("apple", "banana", "pear")
x
str_view(x, "^a")
str_view(x, "a$")
x <- c("apple pie", "apple", "apple cake")
str_view(x, "apple")
str_view(x, "^apple$")
library(stringr)
x <- c("apple", "banana", "pear")
str_view(x, ".a")
str_view(x, "a.")
str_view(x, "gr(e|a)y")
x <- c("grey", "gray")
str_view(x, "gr(e|a)y")
x <- "1888 is the longest year in Roman numerals: MDCCCLXXXVIII"
x
str_view(x, "CC?")
str_view(x, "(CC)?")
str_view(x, "(CC)?")
str_view(x, "(CC)?")
str_view(x, "[CC]?")
str_view(x, "(CC){?}")
str_view(x, "(CC)?")
str_view(x, "CC+") #will identify the first instance
str_view(x, 'C[LX]+')
str_view(x, 'C(L|X)+')
str_view(x, "C{2}")
str_view(x, "C{2,}") #finds "C" 2 or more times
str_view(x, "C{,2}")
str_view(x, "C{,3}")
str_view(x, "C{,1}")
str_view(x, "C{1,1}")
str_view(x, "C{1,3}")
str_view(x, "C{0,3}")
str_view(x, "C{1,3}")
str_view(x, "C{1,3}?")
str_view(x, 'C[LX]+?')
fruit
str_view(fruit, "(..)\\1", match = TRUE)
x <- c("apple", "banana", "pear")
str_detect(x, "e")
sum(str_detect(words, "^t"))
mean(str_detect(words, "[^aeiou]$"))
mean(str_detect(words, "[aeiou]$"))
mean(str_detect(words, "[^aeiou]$"))
x <- c("apple", "banana", "pear")
str_count(x, "a")
mean(str_count(words, "[aeiou]"))
words
str_count("abababa", "aba")
str_view_all("abababa", "aba")
sentences
colors <- c("red", "orange", "yellow", "green", "blue", "purple")
color_match <- str_c(colours, collapse = "|")
color_match <- str_c(colors, collapse = "|")
color_match
has_colour <- str_subset(sentences, colour_match)
has_color <- str_subset(sentences, color_match)
matches <- str_extract(has_color, color_match)
head(matches)
has_color <- str_subset(sentences, color_match)
has_color
color_match2 <- str_c(c("^(", color_match, ")$"))
color_match2
color_match2 <- str_c("^(", color_match, ")$")
color_match2
has_color <- str_subset(sentences, color_match2)
has_color
sentences
color_match2
color_match3 <- str_c("\s (", color_match, ")\s")
color_match3 <- str_c("\\s (", color_match, ")\\s")
color_match3
has_color3 <- str_subset(sentences, color_match3)
has_color3
color_match3 <- str_c("\\s(", color_match, ")\\s")
has_color3 <- str_subset(sentences, color_match3)
has_color3
matches <- str_extract(has_color3, color_match3)
matches
matches.all <- str_extract_all(has_color3, color_match3)
matches.all
noun <- "(a|the) ([^ ]+)"
has_noun <- str_subset(sentences, noun)
has_noun
str_extract(has_noun, noun)
str_match(noun)
str_match(has_noun, noun)
str_replace_all(x, "[aeiou]", "-")
str_split(sentences, " ")
sentences[1]
y <- str_split(sentences[1], " ")
y
X = cbind(c(1,1), c(0.7, 0.69))
Z = X%*%X
Z
X
Z = t(X)%*%X
Z
solve(Z)
solve(Z + 10*eye(2))
solve(Z + 10*diag(2))
?readLines
readLines(file = "https://raw.githubusercontent.com/jdwilson4/Intro-Data-Science/master/Data/tweets.csv")
readLines("https://raw.githubusercontent.com/jdwilson4/Intro-Data-Science/master/Data/tweets.csv")
twitter.data <- read_Lines("https://raw.githubusercontent.com/jdwilson4/Intro-Data-Science/master/Data/tweets.csv")
twitter.data <- read_Lines("https://raw.githubusercontent.com/jdwilson4/Intro-Data-Science/master/Data/tweets.csv")
??read_lines
twitter.data <- read_lines("https://raw.githubusercontent.com/jdwilson4/Intro-Data-Science/master/Data/tweets.csv")
president.data <- read_lines("https://raw.githubusercontent.com/jdwilson4/Intro-Data-Science/master/Data/stateoftheunion1790-2012.txt")
str_c("\\!")
??printLines
writeLines(str_c("\\!"))
twitter.data <- read_lines("https://raw.githubusercontent.com/jdwilson4/Intro-Data-Science/master/Data/tweets.csv")
twitter.data
str_detect(twitter.data, "!+")
twitter.data[str_detect(twitter.data, "!+")]
twitter.data[str_detect(twitter.data, "!{2,}")]
str_replace_all(twitter.data, "!{2,}", "!")
writeLines(twitter.data)
